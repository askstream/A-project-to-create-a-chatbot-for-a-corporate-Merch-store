{
  "name": "TechFlow Merch Store - Complete AI Assistant v2.2.1",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "1bc6563a-52aa-471d-adf0-5d9eec275439",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -1840,
        624
      ],
      "webhookId": "80650978-3c11-493c-a66f-4a1cdd22524d",
      "credentials": {
        "telegramApi": {
          "id": "QqU7hjDbiHKSjiHe",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a1",
              "name": "chat_id",
              "value": "={{ $json.message.chat.id }}",
              "type": "string"
            },
            {
              "id": "a2",
              "name": "message_text",
              "value": "={{ $json.message.text }}",
              "type": "string"
            },
            {
              "id": "a3",
              "name": "user_id",
              "value": "={{ $json.message.from.id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "fec0b722-e290-4abd-9439-59f4f5bdf781",
      "name": "Extract Message",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1616,
        624
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH products_list AS (SELECT json_agg(json_build_object('id', p.id, 'name', p.name, 'category', c.name, 'price', p.price, 'description', p.description) ORDER BY c.sort_order, p.name) AS products FROM products p JOIN categories c ON p.category_id = c.id WHERE p.is_active = TRUE), faq_list AS (SELECT json_agg(json_build_object('question', question, 'answer', answer) ORDER BY sort_order) AS faq FROM faq) SELECT (SELECT products FROM products_list) AS products, (SELECT faq FROM faq_list) AS faq;",
        "options": {}
      },
      "id": "5abdd57b-b833-457f-a424-556f0cc060a5",
      "name": "Get Knowledge Base",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1168,
        624
      ],
      "credentials": {
        "postgres": {
          "id": "Wt1loSLLyz6u0Yc7",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const chatId = $('Extract Message').first().json.chat_id; \nconst messageText = $('Extract Message').first().json.message_text; \nconst userId = $('Extract Message').first().json.user_id; \nconst knowledge = $('Get Knowledge Base').first().json; \n\n// === ЧАСТИ ПРОМПТА ===\nconst promptIntro = `Ты — ИИ-консультант магазина корпоративного мерча компании TechFlow Solutions.`;\nconst promptCatalog = `\\n\\n**Каталог товаров:**\\n${JSON.stringify(knowledge.products, null, 2)}`;\nconst promptFAQ = `\\n\\n**FAQ:**\\n${JSON.stringify(knowledge.faq, null, 2)}`;\nconst promptInstructions = `\\n\\n**Инструкции:**\n1. Отвечай на вопросы о товарах из каталога\n2. На вопросы об оплате, доставке, возврате отвечай по FAQ\n3. Используй функции для работы с корзиной\n4. При первом контакте представься и расскажи что ты умеешь \n5. Не выдавай весь список товара - сначала сообщи какие есть группы, а потом после выбора группы можно показать список товаров в группе\n6. Будь вежливым и кратким\n7. Информация котороая не нужна в процессе продажи игнорируется`;\n\nconst systemPrompt = promptIntro + promptCatalog + promptFAQ + promptInstructions;\n\nconst tools = [\n  {type: 'function', function: {name: 'add_item', description: 'Добавить товар в корзину', parameters: {type: 'object', properties: {product_id: {type: 'string'}, qty: {type: 'integer', minimum: 1}}, required: ['product_id', 'qty']}}}, \n  {type: 'function', function: {name: 'remove_item', description: 'Удалить товар', parameters: {type: 'object', properties: {product_id: {type: 'string'}}, required: ['product_id']}}}, \n  {type: 'function', function: {name: 'get_cart', description: 'Показать корзину', parameters: {type: 'object', properties: {}}}}, \n  {type: 'function', function: {name: 'confirm_order', description: 'Оформить заказ', parameters: {type: 'object', properties: {phone: {type: 'string'}, address: {type: 'string'}}, required: ['phone', 'address']}}}, \n  {type: 'function', function: {name: 'cancel_cart', description: 'Очистить корзину', parameters: {type: 'object', properties: {}}}}, \n  {type: 'function', function: {name: 'show_product_photo', description: 'Показать фото товара', parameters: {type: 'object', properties: {product_id: {type: 'string'}}, required: ['product_id']}}}\n];\n\n// Безопасное получение истории\nlet historyFromDB = [];\ntry {\n  const historyNode = $('DB: Get History');\n  if (historyNode && historyNode.all) {\n    historyFromDB = historyNode.all();\n  }\n} catch (error) {\n  // История не найдена\n}\n\n// ВСЕГДА начинаем с system message\nconst messages = [{ role: 'system', content: systemPrompt }];\n\n// Добавляем историю только если она валидна\nif (Array.isArray(historyFromDB) && historyFromDB.length > 0) {\n  const sortedHistory = [...historyFromDB];\n  \n  for (const msg of sortedHistory) {\n    if (msg && msg.json && typeof msg.json.role === 'string' && msg.json.role) {\n      const messageObj = {\n        role: msg.json.role,\n        content: msg.json.content || null\n      };\n      \n      // ВАЖНО: Парсим tool_calls из JSON-строки в объект\n      if (msg.json.tool_calls) {\n        try {\n          messageObj.tool_calls = typeof msg.json.tool_calls === 'string' \n            ? JSON.parse(msg.json.tool_calls) \n            : msg.json.tool_calls;\n          messageObj.content = null;\n        } catch (e) {\n          // Если парсинг не удался, пропускаем tool_calls\n        }\n      }\n      \n      // Добавляем tool_call_id\n      if (msg.json.tool_call_id) {\n        messageObj.tool_call_id = msg.json.tool_call_id;\n      }\n    \n      // ⚠️ ВАЖНО: Проверяем что для role=\"tool\" есть tool_call_id\n      if (msg.json.role === 'tool' && !msg.json.tool_call_id) {\n        // Пропускаем это сообщение - оно некорректно\n        continue;\n      }      \n      \n      messages.push(messageObj);\n    }\n  }\n}\n\n// ОБЯЗАТЕЛЬНО добавляем текущее сообщение пользователя\nmessages.push({ \n  role: 'user', \n  content: messageText \n});\n\n// ФИНАЛЬНАЯ ПРОВЕРКА\nif (messages.length < 2) {\n  throw new Error('Messages array must contain at least system and user message');\n}\n\nreturn {\n  model: 'gpt-4o-mini', \n  messages: messages,\n  tools: tools,\n  tool_choice: 'auto',\n  _metadata: {\n    chat_id: chatId,\n    user_id: userId,\n    original_message: messageText\n  }\n};\n"
      },
      "id": "a7c20400-e3f2-42e9-8aa1-a857718d9e4c",
      "name": "Build OpenAI Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -944,
        624
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { model: $json.model, messages: $json.messages, tools: $json.tools, tool_choice: $json.tool_choice } }}",
        "options": {}
      },
      "id": "3ba4c67f-a9ed-4898-96a7-0064837bda10",
      "name": "Call OpenAI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -720,
        528
      ],
      "credentials": {
        "openAiApi": {
          "id": "0pPNd2jel2aCLfYR",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "c1",
              "leftValue": "={{ $json.choices?.[0]?.message?.tool_calls?.length > 0 }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "57e3e804-48be-4d8e-9351-e8b76e29995c",
      "name": "Has Tool Call?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        -272,
        624
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.choices[0].message.content }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "8ce7cf0e-f8fe-4ead-a0ba-91d763d1ec85",
      "name": "Send Direct Reply",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1072,
        1072
      ],
      "webhookId": "0f49ce99-9654-455b-a7ab-47f9711ab342",
      "credentials": {
        "telegramApi": {
          "id": "QqU7hjDbiHKSjiHe",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "t1",
              "name": "tool_name",
              "value": "={{ $json.choices[0].message.tool_calls[0].function.name }}",
              "type": "string"
            },
            {
              "id": "t2",
              "name": "tool_args",
              "value": "={{ $json.choices[0].message.tool_calls[0].function.arguments }}",
              "type": "string"
            },
            {
              "id": "t3",
              "name": "tool_call_id",
              "value": "={{ $json.choices[0].message.tool_calls[0].id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "64a3f0f1-0b83-4d26-9dd5-1ac1c2a63643",
      "name": "Extract Tool Call",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -48,
        240
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "r1",
                    "leftValue": "={{ $json.tool_name }}",
                    "rightValue": "add_item",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "r2",
                    "leftValue": "={{ $json.tool_name }}",
                    "rightValue": "remove_item",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "r3",
                    "leftValue": "={{ $json.tool_name }}",
                    "rightValue": "get_cart",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "r4",
                    "leftValue": "={{ $json.tool_name }}",
                    "rightValue": "confirm_order",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "r5",
                    "leftValue": "={{ $json.tool_name }}",
                    "rightValue": "cancel_cart",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "r6",
                    "leftValue": "={{ $json.tool_name }}",
                    "rightValue": "show_product_photo",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "00324bf3-9d1a-490b-8fa3-deea9e61e997",
      "name": "Route Tool",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        176,
        176
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT add_item_to_cart({{ $('Extract Message').first().json.user_id }}, '{{ JSON.parse($json.tool_args).product_id }}', {{ JSON.parse($json.tool_args).qty }}) AS result;",
        "options": {}
      },
      "id": "052c8298-601e-4627-add5-da56c8796b89",
      "name": "DB: Add Item",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        400,
        -128
      ],
      "credentials": {
        "postgres": {
          "id": "Wt1loSLLyz6u0Yc7",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT remove_item_from_cart({{ $('Extract Message').first().json.user_id }}, '{{ JSON.parse($json.tool_args).product_id }}') AS result;",
        "options": {}
      },
      "id": "b707bf97-92af-41f3-a50a-2c8632dca1e8",
      "name": "DB: Remove Item",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        400,
        32
      ],
      "credentials": {
        "postgres": {
          "id": "Wt1loSLLyz6u0Yc7",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT get_cart({{ $('Extract Message').first().json.user_id }}) AS result;",
        "options": {}
      },
      "id": "0c4305ad-8eb3-4420-b769-f75004014a90",
      "name": "DB: Get Cart",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        400,
        192
      ],
      "credentials": {
        "postgres": {
          "id": "Wt1loSLLyz6u0Yc7",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT confirm_order_from_cart({{ $('Extract Message').first().json.user_id }}, '{{ JSON.parse($json.tool_args).phone }}', '{{ JSON.parse($json.tool_args).address }}') AS result;",
        "options": {}
      },
      "id": "92867782-15ee-4668-a273-bb4ea3c1a431",
      "name": "DB: Confirm Order",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        400,
        352
      ],
      "credentials": {
        "postgres": {
          "id": "Wt1loSLLyz6u0Yc7",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT cancel_cart({{ $('Extract Message').first().json.user_id }}) AS result;",
        "options": {}
      },
      "id": "a8cc629d-4c34-4f41-ae42-fe24864c2fc8",
      "name": "DB: Cancel Cart",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        400,
        544
      ],
      "credentials": {
        "postgres": {
          "id": "Wt1loSLLyz6u0Yc7",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT image_path, name FROM products WHERE id = '{{ JSON.parse($json.tool_args).product_id }}';",
        "options": {}
      },
      "id": "7991e45a-fb97-4b91-a276-3e92507592d5",
      "name": "DB: Get Product Photo",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        400,
        736
      ],
      "credentials": {
        "postgres": {
          "id": "Wt1loSLLyz6u0Yc7",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "filePath": "={{ $json.image_path }}"
      },
      "id": "df0db84d-27dc-417b-a883-048b3583f011",
      "name": "Read Photo File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        848,
        784
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Extract Message').first().json.user_id }}",
        "binaryData": true,
        "additionalFields": {
          "caption": "={{ $('DB: Get Product Photo').item.json.name }} — TechFlow"
        }
      },
      "id": "2b0a64ae-9723-4843-b4d8-62fc21e1dfbd",
      "name": "Send Photo",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1072,
        696
      ],
      "webhookId": "11bd5a00-6700-4e4c-98db-28c469bd1a61",
      "credentials": {
        "telegramApi": {
          "id": "QqU7hjDbiHKSjiHe",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Extract Message').first().json.user_id }}",
        "text": "К сожалению, фото для этого товара временно недоступно.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "236176b0-43b2-4097-98d1-8e4d8d0505f3",
      "name": "Send No Photo Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1072,
        888
      ],
      "webhookId": "68dac10d-7f60-470e-8e1b-94e6ab552219",
      "credentials": {
        "telegramApi": {
          "id": "QqU7hjDbiHKSjiHe",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const toolResult = $input.item.json.result;\nconst toolCallId = $('Extract Tool Call').first().json.tool_call_id;\nconst toolName = $('Extract Tool Call').first().json.tool_name;\nconst toolArgs = $('Extract Tool Call').first().json.tool_args;\n\n// Получаем system message и original message\nconst systemMessage = $('Build OpenAI Request').first().json.messages[0].content;\nconst originalMessage = $('Build OpenAI Request').first().json._metadata.original_message;\n\n// Получаем историю из \"Build OpenAI Request\" (она уже там есть!)\nconst allMessages = $('Build OpenAI Request').first().json.messages;\n\n// Создаём новый массив сообщений с историей\nconst messages = [];\n\n// Копируем всю существующую историю (system + предыдущие сообщения)\nfor (let i = 0; i < allMessages.length; i++) {\n  messages.push(allMessages[i]);\n}\n\n// Добавляем текущий tool call от ассистента\nmessages.push({\n  role: \"assistant\",\n  content: null,\n  tool_calls: [{\n    id: toolCallId,\n    type: \"function\",\n    function: {\n      name: toolName,\n      arguments: toolArgs\n    }\n  }]\n});\n\n// Добавляем результат выполнения инструмента\nmessages.push({\n  role: \"tool\",\n  tool_call_id: toolCallId,\n  content: JSON.stringify(toolResult)\n});\n\nconst result = {\n  model: \"gpt-4o-mini\",\n  messages: messages\n};\n\nreturn { json: result };\n"
      },
      "id": "92788493-8841-46f8-b151-1cfbefd4feca",
      "name": "Format Tool Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        624,
        256
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "id": "a1ff64da-3512-4fd1-9d30-97dbba372114",
      "name": "Call OpenAI Final",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        848,
        256
      ],
      "credentials": {
        "openAiApi": {
          "id": "0pPNd2jel2aCLfYR",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Extract Message').first().json.user_id }}",
        "text": "={{ $json.choices[0].message.content }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "4ce203a1-dc15-4bd3-930e-655c308cdd96",
      "name": "Send Final Reply",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1072,
        256
      ],
      "webhookId": "d0d8f46d-2f87-45e0-b152-e2e5f99ebe1a",
      "credentials": {
        "telegramApi": {
          "id": "QqU7hjDbiHKSjiHe",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "o1",
              "leftValue": "={{ $if($('Extract Tool Call').isExecuted, $('Extract Tool Call').first().json.tool_name === 'confirm_order', false) }}",
              "rightValue": "confirm_order",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "dedef7ad-e917-48c0-9df6-8b0cdf4af9d4",
      "name": "Is Order?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [
        1744,
        784
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT tg_user_id, name FROM admins WHERE is_active = TRUE;",
        "options": {}
      },
      "id": "eee84b52-788f-47b1-bd54-bb01c1e0c314",
      "name": "Get Admins",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2192,
        784
      ],
      "credentials": {
        "postgres": {
          "id": "Wt1loSLLyz6u0Yc7",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.tg_user_id }}",
        "text": "=🆕 Новый заказ!\n\nНомер: {{ $('DB: Confirm Order').first().json.result }}\nОт пользователя: {{ $('Build OpenAI Request').first().json._metadata.chat_id }}\nТелефон: {{ JSON.parse($('Extract Tool Call').first().json.tool_args).phone }}\nАдрес: {{ JSON.parse($('Extract Tool Call').first().json.tool_args).address }}\n",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "e2b8057f-6945-4750-813a-58151756628f",
      "name": "Notify Admin",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2416,
        784
      ],
      "webhookId": "85459da6-d236-44fb-be90-ca4652f6e4bc",
      "credentials": {
        "telegramApi": {
          "id": "QqU7hjDbiHKSjiHe",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "06229fe5-627a-4048-82b4-3c46f9300589",
              "name": "chat_id",
              "value": "={{ $json._metadata.chat_id }}",
              "type": "string"
            },
            {
              "id": "ac70b166-84f6-4eb6-afbf-7cefa0f776f3",
              "name": "user_id",
              "value": "={{ $json._metadata.user_id }}",
              "type": "number"
            },
            {
              "id": "64077a2a-d969-4a20-b7b0-4a1163b99cd2",
              "name": "original_message",
              "value": "={{ $json._metadata.original_message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -720,
        720
      ],
      "id": "56018a28-8fc6-4405-861c-0c2e7c07d6b1",
      "name": "Save Metadata"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -496,
        624
      ],
      "id": "dcfa02a4-5b1c-4388-9f32-3af2cf2e0d50",
      "name": "Merge main data"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT role, content, tool_calls, tool_call_id, sort_order\nFROM conversation_history \nWHERE chat_id = '{{ $json.chat_id }}'\nORDER BY created_at ASC, sort_order ASC",
        "options": {}
      },
      "id": "0038a272-f824-4642-ab04-24d5791ba365",
      "name": "DB: Get History",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1392,
        624
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "Wt1loSLLyz6u0Yc7",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const chatId = $('Build OpenAI Request').first().json._metadata.chat_id;\nconst userId = $('Build OpenAI Request').first().json._metadata.user_id;\nconst userMessage = $('Build OpenAI Request').first().json._metadata.original_message;\n\n// Получаем данные о tool call\nconst toolCallId = $('Extract Tool Call').first().json.tool_call_id;\nconst toolName = $('Extract Tool Call').first().json.tool_name;\nconst toolArgs = $('Extract Tool Call').first().json.tool_args;\nconst toolResult = $input.item.json.result;\n\n// Получаем финальный ответ ассистента\nconst finalResponse = $('Call OpenAI Final').first().json.choices[0].message;\n\nreturn [\n  {\n    json: {\n      user_id: userId,\n      chat_id: chatId,\n      role: 'user',\n      content: userMessage,\n      tool_calls: null,\n      tool_call_id: null,\n      sort_order: 1\n    }\n  },\n  {\n    json: {\n      user_id: userId,\n      chat_id: chatId,\n      role: 'assistant',\n      content: null,\n      tool_calls: JSON.stringify([{\n        id: toolCallId,\n        type: 'function',\n        function: {\n          name: toolName,\n          arguments: toolArgs\n        }\n      }]),\n      tool_call_id: null,\n      sort_order: 2\n    }\n  },\n  {\n    json: {\n      user_id: userId,\n      chat_id: chatId,\n      role: 'tool',\n      content: JSON.stringify(toolResult),\n      tool_calls: null,\n      tool_call_id: toolCallId,\n      sort_order: 3\n    }\n  },\n  {\n    json: {\n      user_id: userId,\n      chat_id: chatId,\n      role: 'assistant',\n      content: finalResponse.content,\n      tool_calls: null,\n      tool_call_id: null,\n      sort_order: 4\n    }\n  }\n];\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1296,
        256
      ],
      "id": "00401604-9dee-42db-b23c-403c7bc673cd",
      "name": "Prepare Messages to History"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO conversation_history (user_id, chat_id, role, content, tool_calls, tool_call_id, sort_order)\nVALUES (\n  {{ $json.user_id }},\n  '{{ $json.chat_id }}',\n  '{{ $json.role }}',\n  '{{ $json.content }}',\n  {{ $json.tool_calls ? \"'\" + $json.tool_calls + \"'::jsonb\" : 'NULL' }},\n  {{ $json.tool_call_id ? \"'\" + $json.tool_call_id + \"'\" : 'NULL' }},\n  {{ $json.sort_order || 0 }}\n)\n\n",
        "options": {}
      },
      "id": "9282aa07-d8fc-4d53-8cd0-9182866596a4",
      "name": "DB: Write history",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1520,
        784
      ],
      "credentials": {
        "postgres": {
          "id": "Wt1loSLLyz6u0Yc7",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const chatId = $('Build OpenAI Request').first().json._metadata.chat_id;\nconst userId = $('Build OpenAI Request').first().json._metadata.user_id;\nconst userMessage = $('Build OpenAI Request').first().json._metadata.original_message;\n\n// Получаем ответ ассистента из \"Call OpenAI\" (первый вызов без tool)\nconst assistantResponse = $('Call OpenAI').first().json.choices[0].message;\n\nreturn [\n  {\n    json: {\n      user_id: userId,\n      chat_id: chatId,\n      role: 'user',\n      content: userMessage,\n      tool_calls: null,\n      tool_call_id: null,\n      sort_order: 1\n    }\n  },\n  {\n    json: {\n      user_id: userId,\n      chat_id: chatId,\n      role: 'assistant',\n      content: assistantResponse.content,\n      tool_calls: null,\n      tool_call_id: null,\n      sort_order: 2\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1296,
        1072
      ],
      "id": "604ac235-f4bf-418f-b688-dcc057cd42db",
      "name": "Prepare Direct Messages to History"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH order_history AS (\n  -- Сохраняем историю в заказ\n  UPDATE orders \n  SET conversation_history = (\n    SELECT jsonb_agg(\n      jsonb_build_object(\n        'role', role,\n        'content', content,\n        'tool_calls', tool_calls,\n        'timestamp', created_at\n      ) ORDER BY created_at, sort_order\n    )\n    FROM conversation_history\n    WHERE user_id = {{ $('Extract Message').first().json.user_id }}\n  )\n  WHERE order_no = '{{ $('DB: Confirm Order').first().json.result }}'\n    AND conversation_history IS NULL\n  RETURNING id\n)\n-- Очищаем историю диалога\nDELETE FROM conversation_history \nWHERE user_id = {{ $('Extract Message').first().json.user_id }};\n\nSELECT 'Order updated and history cleared' as result;",
        "options": {}
      },
      "id": "05b0b257-f092-47d5-8d0e-498f13c20b6a",
      "name": "DB: Update Order & Clear History",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1968,
        784
      ],
      "credentials": {
        "postgres": {
          "id": "Wt1loSLLyz6u0Yc7",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const output = [];\n\n// Получаем из предыдущих нод\nconst chatId = $('Build OpenAI Request').first().json._metadata.chat_id;\nconst userId = $('Build OpenAI Request').first().json._metadata.user_id;\nconst userMessage = $('Build OpenAI Request').first().json._metadata.original_message;\n\n// Получаем ответ ассистента из OpenAI\nconst assistantResponse = $('Call OpenAI').first().json.choices[0].message.content || '';\n\n// Смотрим статус отправки фото из текущей ноды\nconst currentItem = items[0].json;\n\n// ИСПРАВЛЕНИЕ: проверяем наличие массива photo в result (ответ от Telegram API)\nconst photoSent = !!(\n  currentItem.result?.photo && \n  Array.isArray(currentItem.result.photo) && \n  currentItem.result.photo.length > 0\n);\n\n// Формируем запись пользователя\noutput.push({\n  user_id: userId,\n  chat_id: chatId,\n  role: 'user',\n  content: userMessage,\n  tool_calls: null,\n  tool_call_id: null,\n  sort_order: 1\n});\n\n// Формируем ответ ассистента\noutput.push({\n  user_id: userId,\n  chat_id: chatId,\n  role: 'assistant',\n  content: photoSent ? 'Фото отправлено' : (assistantResponse || currentItem.result?.text || 'Фото не найдено'),\n  tool_calls: null,\n  tool_call_id: null,\n  sort_order: 2\n});\n\nreturn output.map(i => ({ json: i }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1296,
        784
      ],
      "id": "0dd9dc26-19f1-4400-8f23-734cb94a52e2",
      "name": "Prepare Direct Photo Messages to History"
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Extract Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Message": {
      "main": [
        [
          {
            "node": "DB: Get History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Knowledge Base": {
      "main": [
        [
          {
            "node": "Build OpenAI Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build OpenAI Request": {
      "main": [
        [
          {
            "node": "Call OpenAI",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call OpenAI": {
      "main": [
        [
          {
            "node": "Merge main data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Tool Call?": {
      "main": [
        [
          {
            "node": "Extract Tool Call",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Direct Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Tool Call": {
      "main": [
        [
          {
            "node": "Route Tool",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Tool": {
      "main": [
        [
          {
            "node": "DB: Add Item",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "DB: Remove Item",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "DB: Get Cart",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "DB: Confirm Order",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "DB: Cancel Cart",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "DB: Get Product Photo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB: Add Item": {
      "main": [
        [
          {
            "node": "Format Tool Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB: Remove Item": {
      "main": [
        [
          {
            "node": "Format Tool Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB: Get Cart": {
      "main": [
        [
          {
            "node": "Format Tool Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB: Confirm Order": {
      "main": [
        [
          {
            "node": "Format Tool Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB: Cancel Cart": {
      "main": [
        [
          {
            "node": "Format Tool Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB: Get Product Photo": {
      "main": [
        [
          {
            "node": "Read Photo File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Photo File": {
      "main": [
        [
          {
            "node": "Send Photo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send No Photo Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Tool Result": {
      "main": [
        [
          {
            "node": "Call OpenAI Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call OpenAI Final": {
      "main": [
        [
          {
            "node": "Send Final Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Final Reply": {
      "main": [
        [
          {
            "node": "Prepare Messages to History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Order?": {
      "main": [
        [
          {
            "node": "DB: Update Order & Clear History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Admins": {
      "main": [
        [
          {
            "node": "Notify Admin",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Metadata": {
      "main": [
        [
          {
            "node": "Merge main data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge main data": {
      "main": [
        [
          {
            "node": "Has Tool Call?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB: Get History": {
      "main": [
        [
          {
            "node": "Get Knowledge Base",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Messages to History": {
      "main": [
        [
          {
            "node": "DB: Write history",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB: Write history": {
      "main": [
        [
          {
            "node": "Is Order?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Direct Reply": {
      "main": [
        [
          {
            "node": "Prepare Direct Messages to History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Direct Messages to History": {
      "main": [
        [
          {
            "node": "DB: Write history",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB: Update Order & Clear History": {
      "main": [
        [
          {
            "node": "Get Admins",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Photo": {
      "main": [
        [
          {
            "node": "Prepare Direct Photo Messages to History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send No Photo Message": {
      "main": [
        [
          {
            "node": "Prepare Direct Photo Messages to History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Direct Photo Messages to History": {
      "main": [
        [
          {
            "node": "DB: Write history",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "timezone": "Europe/Amsterdam",
    "callerPolicy": "workflowsFromSameOwner",
    "availableInMCP": false
  },
  "versionId": "aa82152f-6bfb-459d-85ea-8c762ca61aa3",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "0d608af191c9f75fec5a0e1380380c4e7da1ccbd1fa7a76020087750f7c620ec"
  },
  "id": "lOrRQpUgikLXdHT8",
  "tags": []
}